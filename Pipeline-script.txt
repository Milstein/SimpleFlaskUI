pipeline {

    environment {
        registry = "milstein/python-jenkins" // To push an image to Docker Hub, you must first name your local image using your Docker Hub username and the repository name that you created through Docker Hub on the web.
        registryCredential = "dockerhublogin"
        dockerImage = ""
    }

    agent any

    stages {

        stage('Checkout Source') {
            steps {
                git 'https://github.com/Milstein/SimpleFlaskUI.git'
            }
        }

        stage('Build Image') {
            steps {
                script {
                    dockerimagename = "${registry}:${env.BUILD_ID}"
                    println("${dockerimagename}")
                    dockerImage = docker.build("${dockerimagename}")
                }
            }
        }

        stage('Test - Run Docker Container on Jenkins Node') {
            steps {
                sh label: '', script: "docker run -d --name ${JOB_NAME} -p 5000:5000 ${dockerimagename}"
            }
        }

        stage('Push Image to DockerHub') {
            environment {
                registryCredential = 'dockerhublogin'
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Cleanup Docker Container and Image on Jenkins Server') {
            steps {
                sh returnStatus: true, script: 'docker stop ${JOB_NAME}'
                sh returnStatus: true, script: 'docker rmi $(docker images | grep ${registry} | awk \'{print $3}\') --force' // This will delete all images
                sh returnStatus: true, script: 'docker rm ${JOB_NAME}'
            }
        }

        stage('Deploy to Test Server') {
            steps {
                script {
                    def stopContainer = "docker stop ${JOB_NAME}"
                    def delContName = "docker rm ${JOB_NAME}"
                    def delImages = 'docker image prune -a --force'
                    def dRun = "docker run -d --name ${JOB_NAME} -p 5000:5000 ${dockerimagename}"
                    println("${dRun}")
                    sshagent(['ood-host-root-keys']) {
                        sh returnStatus: true, script: "ssh -o StrictHostKeyChecking=no ubuntu@199.94.61.39 ${stopContainer}"
                        sh returnStatus: true, script: "ssh -o StrictHostKeyChecking=no ubuntu@199.94.61.39 ${delContName}"
                        sh returnStatus: true, script: "ssh -o StrictHostKeyChecking=no ubuntu@199.94.61.39 ${delImages}"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@199.94.61.39 ${dRun}"
                    }
                }
            }
        }
    }
}
